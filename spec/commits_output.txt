[{:commit=>#<Grit::Commit "b2ee5153ef6563ea2efd2fa0b0078c4e20a8d787">, :diff=>#<Grit::Diff:0x1249dc4 @new_file=true, @diff="--- /dev/null\n+++ b/single_file_gistory.rb\n@@ -0,0 +1,159 @@\n+require 'rubygems'\n+require 'sinatra'\n+require 'erb'\n+require 'grit'\n+include Grit\n+\n+class String\n+  def ucfirst\n+    out = self\n+    out[0] = out[0..0].upcase if length > 0\n+    out\n+  end\n+end\n+\n+def supplied?(thing, thing_name)\n+  if thing.nil? or thing.gsub(/\\s+/, '') == ''\n+    puts \"No \#{thing_name} supplied\"\n+    exit\n+  end\n+end\n+\n+def get_commits(repo, file_name, branch)\n+  log_data = repo.git.log({ :pretty => 'raw' }, \"--follow\", '--topo-order', '-p', branch, \"--\", file_name)\n+  commit_diff_data = []\n+  log_data.split(\"\\n\").each do |c|\n+    if c =~ /^commit /\n+      commit_diff_data << [c]\n+    else\n+      commit_diff_data.last << c\n+    end\n+  end\n+\n+  commit_diff_data.map do |c|\n+    commit = []\n+    0.upto(c.length) do |i|\n+      if c[i] !~ /^diff/\n+        commit << c[i]\n+      else\n+        break\n+      end\n+    end\n+    diff = c[(commit.length)..-1]\n+\n+    { :commit => Commit.list_from_string(repo, commit.join(\"\\n\"))[0], :diff => Grit::Diff.list_from_string(repo, diff.join(\"\\n\"))[0] }\n+  end.reverse\n+end\n+\n+repo_dir, file_name, branch = ARGV[0..3]\n+\n+supplied?(repo_dir, \"repo\")\n+supplied?(file_name, \"file\")\n+supplied?(branch, \"branch\")\n+\n+repo = Repo.new(File.expand_path(repo_dir))\n+\n+puts \"Loading commits...\"\n+\n+class Actor\n+  def name_email\n+    \"\#{name} <\#{email}>\"\n+  end\n+  \n+  def ==(other)\n+    name_email == other.name_email\n+  end\n+end\n+\n+class Time\n+  def nice\n+    strftime(\"%A %d/%m/%Y %I:%M %p\")\n+  end\n+end\n+\n+commits = get_commits(repo, file_name, branch)\n+\n+puts \"Loaded commits\"\n+\n+get '/' do\n+  @commits = commits\n+\n+  erb :index\n+end\n+\n+get '/commit/*' do\n+  @repo_dir = repo_dir\n+  @commits = commits\n+  @commit_index = params[:splat].first.to_i\n+  commit_diff = commits[@commit_index]\n+  @commit, @diff = commit_diff[:commit], commit_diff[:diff]\n+  puts @commit.sha  \n+  \n+  @diff_data = diff_to_html(@commit, @diff)\n+#  puts @diff_data[:content].inspect\n+\n+  content_type 'text/javascript'\n+  erb :commit, :layout => false\n+end\n+\n+get '/show/:commit/*' do\n+  blob = (repo.commit(params[:commit]).tree / params[:splat].first)\n+  blob.data\n+end\n+\n+helpers do\n+  include Rack::Utils\n+  alias_method :h, :escape_html\n+  \n+  def diff_to_html(commit, diff)\n+    if diff.diff =~ /^rename/\n+      { :type => 'rename', :message => diff.diff.ucfirst, :content => nil }\n+    elsif diff.diff =~ /^Binary/\n+      if diff.new_file\n+        { :type => 'new', :message => \"Created binary file <a href='/show/\#{commit.sha}/\#{h diff.b_path}'>\#{h diff.b_path}</a>\", :content => nil }\n+      elsif diff.deleted_file\n+        { :type => 'delete', :message => \"Deleted binary file \#{h diff.a_path}\", :content => nil }\n+      else\n+        { :type => 'change', :message => \"Changed binary file <a href='/show/\#{commit.sha}/\#{h diff.a_path}'>\#{h diff.a_path}</a>\", :content => nil }\n+      end\n+    else\n+      puts diff.diff\n+      content_lines = diff.diff.split(/\\n/)[2..-1]\n+      line_offset = 1\n+      changes = []\n+      content_lines.each do |l|\n+        puts \"line_offset: \#{line_offset}, l: \#{l}\"\n+        if l =~ /^(\\@\\@ \\-(\\d+),(\\d+) \\+(\\d+),(\\d+) \\@\\@)/\n+          line_offset = $2.to_i == 0 ? 1 : $2.to_i\n+        else\n+          if l =~ /^\\+/\n+            changes << { :start => line_offset, :lines => \"\", :mode => :add } if changes.empty? or changes.last[:mode] != :add\n+            changes.last[:mode] = :add\n+            lt = h(l[1..-1]).gsub(' ', \"&nbsp;\")\n+            changes.last[:lines] << \"<div>\#{lt == '' ? \"&nbsp;\" : lt}</div>\"\n+          elsif l =~ /^-/\n+            changes << { :start => line_offset, :times => 0, :mode => :remove } if changes.empty? or changes.last[:mode] != :remove\n+            changes.last[:times] += 1\n+            line_offset -= 1\n+          end\n+          line_offset += 1\n+        end\n+      end\n+      puts changes.inspect\n+\n+      if diff.new_file\n+        { :type => 'new', :message => \"Created file <a href='/show/\#{commit.sha}/\#{h diff.b_path}'>\#{h diff.b_path}</a>\", :content => changes }\n+      elsif diff.deleted_file\n+        { :type => 'delete', :message => \"Deleted file \#{diff.a_path}\", :content => changes }\n+      else\n+        { :type => 'change', :message => \"Changed file <a href='/show/\#{commit.sha}/\#{h diff.a_path}'>\#{diff.a_path}</a>\", :content => changes }\n+      end\n+    end\n+  end\n+\n+  def j(str)\n+    str.to_s.gsub('\\\\', '\\\\\\\\\\\\\\\\').gsub(/[&\"><]/) { |special| { '&' => '\\u0026', '>' => '\\u003E', '<' => '\\u003C', '\"' => '\\\"' }[special] }\n+  end\n+end\n+\n+puts \"Started\"\n\\ No newline at end of file", @a_blob=#<Grit::Blob "0000000">, @b_mode=nil, @b_path="single_file_gistory.rb", @repo=#<Grit::Repo "/Users/tlucas/Sites/gistory/.git">, @a_mode=nil, @a_path="single_file_gistory.rb", @deleted_file=false, @b_blob=#<Grit::Blob "7151e72">>}, {:commit=>#<Grit::Commit "30f24f03398a821492fb4612ee7c4dfc7d4aba1c">, :diff=>#<Grit::Diff:0x124e464 @new_file=false, @diff="--- a/single_file_gistory.rb\n+++ b/single_file_gistory.rb\n@@ -4,6 +4,10 @@ require 'erb'\n require 'grit'\n include Grit\n \n+set :logging, false\n+set :host, 'localhost'\n+set :port, 6568\n+\n class String\n   def ucfirst\n     out = self\n@@ -13,10 +17,12 @@ class String\n end\n \n def supplied?(thing, thing_name)\n-  if thing.nil? or thing.gsub(/\\s+/, '') == ''\n-    puts \"No \#{thing_name} supplied\"\n-    exit\n+  while thing.nil? or thing.gsub(/\\s+/, '') == ''\n+    print \"No \#{thing_name} supplied; please enter \#{thing_name}, or nothing to exit: \"\n+    thing = gets.chomp\n+    exit if thing == ''\n   end\n+  thing\n end\n \n def get_commits(repo, file_name, branch)\n@@ -47,9 +53,14 @@ end\n \n repo_dir, file_name, branch = ARGV[0..3]\n \n-supplied?(repo_dir, \"repo\")\n-supplied?(file_name, \"file\")\n-supplied?(branch, \"branch\")\n+repo_dir = supplied?(repo_dir, \"repo\")\n+file_name = supplied?(file_name, \"file\")\n+branch = supplied?(branch, \"branch\")\n+\n+unless File.exists?(File.expand_path(repo_dir))\n+  puts \"The repo you spplied doesn't exist; please check the data you supplied and try again.\"\n+  exit\n+end\n \n repo = Repo.new(File.expand_path(repo_dir))\n \n@@ -73,6 +84,11 @@ end\n \n commits = get_commits(repo, file_name, branch)\n \n+if commits.empty?\n+  puts \"No commits found for supplied data; pleast check the data you supplied and try again.\"\n+  exit\n+end\n+\n puts \"Loaded commits\"\n \n get '/' do\n@@ -82,12 +98,12 @@ get '/' do\n end\n \n get '/commit/*' do\n+  @delay = 1\n   @repo_dir = repo_dir\n   @commits = commits\n   @commit_index = params[:splat].first.to_i\n   commit_diff = commits[@commit_index]\n-  @commit, @diff = commit_diff[:commit], commit_diff[:diff]\n-  puts @commit.sha  \n+  @commit, @diff = commit_diff[:commit], commit_diff[:diff] \n   \n   @diff_data = diff_to_html(@commit, @diff)\n #  puts @diff_data[:content].inspect\n@@ -107,46 +123,50 @@ helpers do\n   \n   def diff_to_html(commit, diff)\n     if diff.diff =~ /^rename/\n-      { :type => 'rename', :message => diff.diff.ucfirst, :content => nil }\n+      { :type => 'rename', :message => diff.diff.ucfirst.gsub(\"\\n\", \" => \"), :content => nil }\n     elsif diff.diff =~ /^Binary/\n       if diff.new_file\n-        { :type => 'new', :message => \"Created binary file <a href='/show/\#{commit.sha}/\#{h diff.b_path}'>\#{h diff.b_path}</a>\", :content => nil }\n+        { :type => 'new', :message => \"Created binary file \#{h diff.b_path}\", :content => nil }\n       elsif diff.deleted_file\n         { :type => 'delete', :message => \"Deleted binary file \#{h diff.a_path}\", :content => nil }\n       else\n-        { :type => 'change', :message => \"Changed binary file <a href='/show/\#{commit.sha}/\#{h diff.a_path}'>\#{h diff.a_path}</a>\", :content => nil }\n+        { :type => 'change', :message => \"Changed binary file \#{h diff.a_path}\", :content => nil }\n       end\n     else\n-      puts diff.diff\n+      #puts diff.diff\n       content_lines = diff.diff.split(/\\n/)[2..-1]\n       line_offset = 1\n       changes = []\n+      should_change = false\n       content_lines.each do |l|\n-        puts \"line_offset: \#{line_offset}, l: \#{l}\"\n+        #puts \"line_offset: \#{line_offset}, l: \#{l}\"\n         if l =~ /^(\\@\\@ \\-(\\d+),(\\d+) \\+(\\d+),(\\d+) \\@\\@)/\n-          line_offset = $2.to_i == 0 ? 1 : $2.to_i\n+          line_offset = $4.to_i == 0 ? 1 : $4.to_i\n         else\n           if l =~ /^\\+/\n-            changes << { :start => line_offset, :lines => \"\", :mode => :add } if changes.empty? or changes.last[:mode] != :add\n-            changes.last[:mode] = :add\n-            lt = h(l[1..-1]).gsub(' ', \"&nbsp;\")\n+            changes << { :start => line_offset, :lines => \"\", :mode => :add } if should_change or changes.empty? or changes.last[:mode] != :add\n+            should_change = false\n+            lt = h(l[1..-1]).gsub(/  /, \" &nbsp;\")\n             changes.last[:lines] << \"<div>\#{lt == '' ? \"&nbsp;\" : lt}</div>\"\n           elsif l =~ /^-/\n-            changes << { :start => line_offset, :times => 0, :mode => :remove } if changes.empty? or changes.last[:mode] != :remove\n+            changes << { :start => line_offset, :times => 0, :mode => :remove } if should_change or changes.empty? or changes.last[:mode] != :remove\n+            should_change = false\n             changes.last[:times] += 1\n             line_offset -= 1\n+          else\n+            should_change = true\n           end\n           line_offset += 1\n         end\n       end\n-      puts changes.inspect\n+      #puts changes.inspect\n \n       if diff.new_file\n-        { :type => 'new', :message => \"Created file <a href='/show/\#{commit.sha}/\#{h diff.b_path}'>\#{h diff.b_path}</a>\", :content => changes }\n+        { :type => 'new', :message => \"Created file \#{h diff.b_path}\", :content => changes }\n       elsif diff.deleted_file\n         { :type => 'delete', :message => \"Deleted file \#{diff.a_path}\", :content => changes }\n       else\n-        { :type => 'change', :message => \"Changed file <a href='/show/\#{commit.sha}/\#{h diff.a_path}'>\#{diff.a_path}</a>\", :content => changes }\n+        { :type => 'change', :message => \"Changed file \#{diff.a_path}\", :content => changes }\n       end\n     end\n   end\n@@ -156,4 +176,14 @@ helpers do\n   end\n end\n \n-puts \"Started\"\n\\ No newline at end of file\n+puts \"Started\"\n+\n+sleep(1)\n+\n+#if RUBY_PLATFORM =~ /(win|w)32$/\n+#  `start http://localhost:6568/`\n+if RUBY_PLATFORM =~ /darwin/\n+  `open http://localhost:6568/`\n+else\n+  puts \"Please open your web browser and visit http://localhost:6568/\"\n+end\n\\ No newline at end of file", @a_blob=#<Grit::Blob "7151e72">, @b_mode="100644", @b_path="single_file_gistory.rb", @repo=#<Grit::Repo "/Users/tlucas/Sites/gistory/.git">, @a_mode=nil, @a_path="single_file_gistory.rb", @deleted_file=false, @b_blob=#<Grit::Blob "625b5ee">>}, {:commit=>#<Grit::Commit "c3cb5304ee4f37c3c7ce002b785e747f859f7986">, :diff=>#<Grit::Diff:0x12520c8 @new_file=false, @diff="rename from single_file_gistory.rb\nrename to gistory.rb", @a_blob=#<Grit::Blob "">, @b_mode=nil, @b_path="gistory.rb", @repo=#<Grit::Repo "/Users/tlucas/Sites/gistory/.git">, @a_mode=nil, @a_path="single_file_gistory.rb", @deleted_file=false, @b_blob=#<Grit::Blob "">>}, {:commit=>#<Grit::Commit "30f3a829eee39346060627db628370be47328010">, :diff=>#<Grit::Diff:0x125352c @new_file=false, @diff="--- a/gistory.rb\n+++ b/gistory.rb\n@@ -99,6 +99,7 @@ end\n \n get '/commit/*' do\n   @delay = 1\n+  @lps = 10\n   @repo_dir = repo_dir\n   @commits = commits\n   @commit_index = params[:splat].first.to_i\n@@ -172,7 +173,7 @@ helpers do\n   end\n \n   def j(str)\n-    str.to_s.gsub('\\\\', '\\\\\\\\\\\\\\\\').gsub(/[&\"><]/) { |special| { '&' => '\\u0026', '>' => '\\u003E', '<' => '\\u003C', '\"' => '\\\"' }[special] }\n+    str.to_s.gsub('\\\\', '\\\\\\\\\\\\\\\\').gsub(/[&\"><\\n\\r]/) { |special| { '&' => '\\u0026', '>' => '\\u003E', '<' => '\\u003C', '\"' => '\\\"', \"\\n\" => \"\\\\n\", \"\\r\" => \"\\\\r\" }[special] }\n   end\n end\n ", @a_blob=#<Grit::Blob "625b5ee">, @b_mode="100644", @b_path="gistory.rb", @repo=#<Grit::Repo "/Users/tlucas/Sites/gistory/.git">, @a_mode=nil, @a_path="gistory.rb", @deleted_file=false, @b_blob=#<Grit::Blob "f41a4b6">>}, {:commit=>#<Grit::Commit "5bc99196c5b9bc5174d3748b5f3629ba5bd917a1">, :diff=>#<Grit::Diff:0x12579c4 @new_file=false, @diff="--- a/gistory.rb\n+++ b/gistory.rb\n@@ -4,6 +4,8 @@ require 'erb'\n require 'grit'\n include Grit\n \n+Git.git_timeout = 60\n+\n set :logging, false\n set :host, 'localhost'\n set :port, 6568\n@@ -99,7 +101,8 @@ end\n \n get '/commit/*' do\n   @delay = 1\n-  @lps = 10\n+  @lps = 2\n+  @max_time = 10\n   @repo_dir = repo_dir\n   @commits = commits\n   @commit_index = params[:splat].first.to_i\n@@ -107,6 +110,7 @@ get '/commit/*' do\n   @commit, @diff = commit_diff[:commit], commit_diff[:diff] \n   \n   @diff_data = diff_to_html(@commit, @diff)\n+#  puts @diff_data.inspect\n #  puts @diff_data[:content].inspect\n \n   content_type 'text/javascript'\n@@ -144,9 +148,13 @@ helpers do\n         if l =~ /^(\\@\\@ \\-(\\d+),(\\d+) \\+(\\d+),(\\d+) \\@\\@)/\n           line_offset = $4.to_i == 0 ? 1 : $4.to_i\n         else\n-          if l =~ /^\\+/\n-            changes << { :start => line_offset, :lines => \"\", :mode => :add } if should_change or changes.empty? or changes.last[:mode] != :add\n+          if l == '\\ No newline at end of file' && changes.length >= 2 && changes.last[:mode] == :add && changes[-2][:mode] == :remove &&            changes.last[:times] == 1 && changes[-2][:times] == 1\n+            changes.pop\n+            changes.pop\n+          elsif l =~ /^\\+/\n+            changes << { :start => line_offset, :lines => \"\", :times => 0, :mode => :add } if should_change or changes.empty? or changes.last[:mode] != :add\n             should_change = false\n+            changes.last[:times] += 1\n             lt = h(l[1..-1]).gsub(/  /, \" &nbsp;\")\n             changes.last[:lines] << \"<div>\#{lt == '' ? \"&nbsp;\" : lt}</div>\"\n           elsif l =~ /^-/\n@@ -179,7 +187,7 @@ end\n \n puts \"Started\"\n \n-sleep(1)\n+sleep(5)\n \n #if RUBY_PLATFORM =~ /(win|w)32$/\n #  `start http://localhost:6568/`", @a_blob=#<Grit::Blob "f41a4b6">, @b_mode="100644", @b_path="gistory.rb", @repo=#<Grit::Repo "/Users/tlucas/Sites/gistory/.git">, @a_mode=nil, @a_path="gistory.rb", @deleted_file=false, @b_blob=#<Grit::Blob "66fb8d5">>}, {:commit=>#<Grit::Commit "3763e8cd628ca8455ee95743397e50e191b5ec7c">, :diff=>#<Grit::Diff:0x1259be8 @new_file=false, @diff="--- a/gistory.rb\n+++ b/gistory.rb\n@@ -103,6 +103,7 @@ get '/commit/*' do\n   @delay = 1\n   @lps = 2\n   @max_time = 10\n+  @wait_time_after_change = 0.75\n   @repo_dir = repo_dir\n   @commits = commits\n   @commit_index = params[:splat].first.to_i", @a_blob=#<Grit::Blob "66fb8d5">, @b_mode="100644", @b_path="gistory.rb", @repo=#<Grit::Repo "/Users/tlucas/Sites/gistory/.git">, @a_mode=nil, @a_path="gistory.rb", @deleted_file=false, @b_blob=#<Grit::Blob "63cc11d">>}, {:commit=>#<Grit::Commit "238e826e16ce33940c8a0112414c088eef7344c4">, :diff=>#<Grit::Diff:0x125b9e8 @new_file=false, @diff="--- a/gistory.rb\n+++ b/gistory.rb\n@@ -101,9 +101,9 @@ end\n \n get '/commit/*' do\n   @delay = 1\n-  @lps = 2\n+  @lps_change = 5\n+  @lps_scroll = 20\n   @max_time = 10\n-  @wait_time_after_change = 0.75\n   @repo_dir = repo_dir\n   @commits = commits\n   @commit_index = params[:splat].first.to_i\n@@ -186,14 +186,17 @@ helpers do\n   end\n end\n \n-puts \"Started\"\n+puts \"Waiting to launch gistory...\"\n \n-sleep(5)\n+Thread.new do\n+  sleep(1)\n \n-#if RUBY_PLATFORM =~ /(win|w)32$/\n-#  `start http://localhost:6568/`\n-if RUBY_PLATFORM =~ /darwin/\n-  `open http://localhost:6568/`\n-else\n-  puts \"Please open your web browser and visit http://localhost:6568/\"\n+  #if RUBY_PLATFORM =~ /(win|w)32$/\n+  #  `start http://localhost:6568/`\n+  if RUBY_PLATFORM =~ /darwin/\n+    `open http://localhost:6568/`\n+    puts \"Launched gistory\"\n+  else\n+    puts \"Please open your web browser and visit http://localhost:6568/\"\n+  end\n end\n\\ No newline at end of file", @a_blob=#<Grit::Blob "63cc11d">, @b_mode="100644", @b_path="gistory.rb", @repo=#<Grit::Repo "/Users/tlucas/Sites/gistory/.git">, @a_mode=nil, @a_path="gistory.rb", @deleted_file=false, @b_blob=#<Grit::Blob "f532092">>}]