$("diff").setStyle({ 'paddingTop': $('header').getHeight() + "px" });
queue.push(function()
{
  //console.log("Starting an add...");
  var wrapper = new Element('div');
  wrapper.update("<%= j change[:lines] %>").hide();

  var scrollOffset = -(diffContentFontSize * 3) - $('header').getHeight();
  var insertPoint = $('diff_content').down(<%= change[:start] - 1 %>);
  var insertDuration = (scrollToDistance(insertPoint, scrollOffset) / (diffContentFontSize * <%= @lps_scroll %>));

  if((scrollToDistance(insertPoint, scrollOffset)) <= 0)
  {
    scrollOffset = 0;
    insertDuration = 0;
  }

  //console.log("issuing a scroll to for an add, to ", insertPoint.cumulativeOffset(), " offset by ", scrollOffset, "px taking ", insertDuration, "seconds, total page height", $$("body")[0].getHeight(), "px");

  Effect.ScrollTo(insertPoint, { duration: insertDuration, offset: scrollOffset, afterFinish: function()
  {
    insertPoint.insert({ 'after': wrapper });

    var blindDuration = (blindDistance(wrapper) / (diffContentFontSize * <%= @lps_change %>));
    //console.log("issuing a blind down for a add, taking ", blindDuration, " seconds");
    wrapper.blindDown({ duration: blindDuration, afterFinish: function()
    {
      wrapper.replace(wrapper.innerHTML);
      setTimeout(function()
      {
        if(queue.length > 0) (queue.shift())(); 
      }, <%= 3 * (1000 / @lps_change.to_f) %>);
    } });

    if(blindDistance(wrapper) > document.viewport.getHeight())
    {
      //console.log("issuing a scroll to bottom for an add, taking ", [blindDuration - 0.5, 0].max(), " seconds, with a delay of ", (blindDistance(wrapper) - 0.5 < 0 ? 0 : 0.5), " seconds");
      Effect.ScrollToBottom(wrapper, { duration: [blindDuration - 0.5, 0].max(), delay: (blindDistance(wrapper) - 0.5 < 0 ? 0 : 0.5) });
    }
  } });
});