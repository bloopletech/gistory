$('commit_index').innerHTML = "<%= j @commit_index + 1 %>";
$('commit_message').innerHTML = "<%= j @commit.message %>";
$('committer_author_details').innerHTML = "<%= h @commit.committer.name_email %><%= (@commit.committer != @commit.author ? " for #{h @commit.author.name_email}": "") %>";
$('committer_date_time').innerHTML = "<%= j @commit.date.nice %>";
$('diff_message').innerHTML = "<%= j @diff_data[:message] %>";
queue = [];
<% if @diff_data[:type] == 'rename' %>
  queue.push(function()
  {
    Effect.ScrollTo($$("body")[0], { duration: <%= @delay %>, offset: 0, afterFinish: function()
    {
      if(queue.length > 0)(queue.shift())();
    } });
  });
<% end %>
<% if @diff_data[:content] %>
  <% @diff_data[:content].each do |change| %>
    <% if false && @diff_data[:type] == 'change' %>
    <% elsif change[:mode] == :add %>
      $("diff").setStyle({ 'paddingTop': $('header').getHeight() + "px" });
      queue.push(function()
      {
        var wrapper = new Element('div');
        wrapper.update("<%= j change[:lines] %>");

        var scrollOffset = -(diffContentFontSize * 3) - $('header').getHeight();
        var insertPoint = $('diff_content').down(<%= change[:start] - 1 %>);
        var insertDuration = [(scrollToDistance(insertPoint, scrollOffset) / (diffContentFontSize * <%= @lps %>)), <%= @max_time %>].min();
        //console.log("issuing a scroll to for an add, to ", insertPoint.cumulativeOffset(), " offset by ", scrollOffset, "px taking ", insertDuration, "seconds, total page height", $$("body")[0].getHeight(), "px");
        Effect.ScrollTo(insertPoint, { duration: insertDuration, offset: scrollOffset, afterFinish: function()
        {
          insertPoint.insert({ 'after': wrapper });

          var blindDuration = [(blindDistance(wrapper) / (diffContentFontSize * <%= @lps %>)), <%= @max_time %>].min();
          //console.log("issuing a blind up for a add, taking ", blindDuration, " seconds");
          wrapper.hide().blindDown({ duration: blindDuration, afterFinish: function()
          {
            wrapper.replace(wrapper.innerHTML);
            setTimeout(function()
            {
              if(queue.length > 0) (queue.shift())(); 
            }, <%= @wait_time_after_change * 1000 %>);
          } });

          if(blindDistance(wrapper) > document.viewport.getHeight())
          {
            //console.log("issuing a scroll to bottom up for an add, taking ", [blindDuration - 0.5, 0].max(), " seconds, with a delay of ", (blindDistance(wrapper) - 0.5 < 0 ? 0 : 0.5), " seconds");
            Effect.ScrollToBottom(wrapper, { duration: [blindDuration - 0.5, 0].max(), delay: (blindDistance(wrapper) - 0.5 < 0 ? 0 : 0.5) });
          }
        } });
      });
    <% elsif change[:mode] == :remove %>
      $("diff").setStyle({ 'paddingTop': $('header').getHeight() + "px" });
      queue.push(function()
      {
        var removePoint = new Element('div');
        $('diff_content').down(<%= change[:start] %>).insert({ 'before': removePoint });

        <% change[:times].times do %>
          removePoint.insert({ 'bottom': $('diff_content').immediateDescendants()[<%= change[:start] + 1 %>] });
        <% end %>

        var scrollOffset = -(diffContentFontSize * 3) - $('header').getHeight();
        var scrollDuration = [(scrollToDistance(removePoint, scrollOffset) / (diffContentFontSize * <%= @lps %>)), <%= @max_time %>].min();
        //console.log("issuing a scroll to for a remove, to ", removePoint.cumulativeOffset(), " offset by ", scrollOffset, "px taking ", scrollDuration, "seconds, total page height", $$("body")[0].getHeight(), "px");        
        Effect.ScrollTo/*Bottom*/(removePoint, { duration: scrollDuration, offset: scrollOffset, afterFinish: function()
        {
          var blindDuration = [(blindDistance(removePoint) / (diffContentFontSize * <%= @lps %>)), <%= @max_time %>].min();
          //console.log("issuing a blind up for a remove, taking ", blindDuration, " seconds");
          removePoint.blindUp({ duration: blindDuration, afterFinish: function()
          {
            removePoint.remove();
            setTimeout(function()
            {
              if(queue.length > 0) (queue.shift())(); 
            }, <%= @wait_time_after_change * 1000 %>);
          } });

/*
          if(blindDistance(removePoint) > document.viewport.getHeight())
          {
            Effect.ScrollTo(removePoint, { duration: [blindDuration - 0.5, 0].max(), delay: (blindDuration - 0.5 < 0 ? 0 : 0.5) });
          }*/
        } });
      });
    <% end %>
  <% end %>
<% end %>

<% if @commit_index < @commits.length - 1 %>
  queue.push(function()
  {
    new Ajax.Request("/commit/<%= @commit_index.to_i + 1 %>", { method: 'get' });
  });
<% end %>

if(queue.length > 0) (queue.shift())();